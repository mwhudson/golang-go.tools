Description: fixes FTBFS
Forwarded: no
Origin: vendor
Author: gri@golang.org
Bug: https://code.google.com/p/go/issues/detail?id=8366

Index: golang-go.tools/go/importer/import_test.go
===================================================================
--- golang-go.tools.orig/go/importer/import_test.go
+++ golang-go.tools/go/importer/import_test.go
@@ -16,6 +16,7 @@ import (
 	"path/filepath"
 	"runtime"
 	"sort"
+	"strconv"
 	"testing"
 	"time"
 
@@ -23,6 +24,8 @@ import (
 	"code.google.com/p/go.tools/go/types"
 )
 
+var fset = token.NewFileSet()
+
 var tests = []string{
 	`package p`,
 
@@ -125,6 +128,12 @@ func TestImportStdLib(t *testing.T) {
 		}
 
 		size, gcsize := testExportImport(t, pkg, lib)
+		if gcsize == 0 {
+			// if gc import didn't happen, assume same size
+			// (and avoid division by zero below)
+			gcsize = size
+		}
+
 		if testing.Verbose() {
 			fmt.Printf("%s\t%d\t%d\t%d%%\n", lib, size, gcsize, int(float64(size)*100/float64(gcsize)))
 		}
@@ -180,15 +189,12 @@ func testExportImport(t *testing.T, pkg0
 }
 
 func pkgForSource(src string) (*types.Package, error) {
-	// parse file
-	fset := token.NewFileSet()
 	f, err := parser.ParseFile(fset, "", src, 0)
 	if err != nil {
 		return nil, err
 	}
 
-	// typecheck file
-	return types.Check("import-test", fset, []*ast.File{f})
+	return typecheck("import-test", f)
 }
 
 func pkgForPath(path string) (*types.Package, error) {
@@ -201,7 +207,6 @@ func pkgForPath(path string) (*types.Pac
 	filenames := append(pkginfo.GoFiles, pkginfo.CgoFiles...)
 
 	// parse files
-	fset := token.NewFileSet()
 	files := make([]*ast.File, len(filenames))
 	for i, filename := range filenames {
 		var err error
@@ -211,10 +216,24 @@ func pkgForPath(path string) (*types.Pac
 		}
 	}
 
-	// typecheck files
-	// (we only care about exports and thus can ignore function bodies)
-	conf := types.Config{IgnoreFuncBodies: true, FakeImportC: true}
-	return conf.Check(path, fset, files, nil)
+	return typecheck(path, files...)
+}
+
+var defaultConf = types.Config{
+	// we only care about exports and thus can ignore function bodies
+	IgnoreFuncBodies: true,
+	// work around C imports if possible
+	FakeImportC: true,
+	// strconv exports IntSize as a constant. The type-checker must
+	// use the same word size otherwise the result of the type-checker
+	// and gc imports is different. We don't care about alignment
+	// since none of the tests have exported constants depending
+	// on alignment (see also issue 8366).
+	Sizes: &types.StdSizes{WordSize: strconv.IntSize / 8, MaxAlign: 8},
+}
+
+func typecheck(path string, files ...*ast.File) (*types.Package, error) {
+	return defaultConf.Check(path, fset, files, nil)
 }
 
 // pkgString returns a string representation of a package's exported interface.
